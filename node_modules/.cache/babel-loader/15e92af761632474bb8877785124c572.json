{"ast":null,"code":"import React from\"react\";import Layout,{InlineMath,BlockMath,SyntaxHighlighter}from\"../../Layout\";function Vector_Database(){return/*#__PURE__*/React.createElement(\"main\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Key Concepts\"),/*#__PURE__*/React.createElement(\"h3\",null,\"1. Vector Databases\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Emerged due to limitations in traditional databases and the rise of AI applications.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Store and manage vector embeddings which represent data in high-dimensional spaces.\")),/*#__PURE__*/React.createElement(\"h3\",null,\"2. Vector Embeddings\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Process of converting data (text, images, audio) into high-dimensional vectors.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Examples include OpenAI's text-embedding-ada-002 for text and clip-vit-base-patch32 for images.\")),/*#__PURE__*/React.createElement(\"h3\",null,\"3. Similarity Search\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Core function of vector databases, finding similar vectors in high-dimensional space.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Algorithms include K-Means, Product Quantization (PQ), Hierarchical Navigable Small Worlds (HNSW), and Locality Sensitive Hashing (LSH).\")),/*#__PURE__*/React.createElement(\"h3\",null,\"4. Feature Engineering\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Process of extracting features from raw data to better represent its underlying patterns.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Essential for creating effective vector embeddings.\")),/*#__PURE__*/React.createElement(\"h2\",null,\"Important Algorithms and Methods\"),/*#__PURE__*/React.createElement(\"h3\",null,\"1. K-Means Clustering\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Divides data into k clusters by minimizing within-cluster variance.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Steps: initialize centroids, assign points to nearest centroid, update centroids, repeat until convergence.\")),/*#__PURE__*/React.createElement(\"h3\",null,\"2. Product Quantization (PQ)\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Reduces memory usage by splitting vectors into sub-vectors and quantizing each sub-vector independently.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Maintains search efficiency by encoding vectors into compact representations.\")),/*#__PURE__*/React.createElement(\"h3\",null,\"3. Hierarchical Navigable Small Worlds (HNSW)\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Constructs a multi-layer graph where each layer is a small-world network.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Provides efficient search by navigating through higher layers (coarse search) down to lower layers (fine search).\")),/*#__PURE__*/React.createElement(\"h3\",null,\"4. Locality Sensitive Hashing (LSH)\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Hashes similar vectors into the same bucket with high probability.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Uses random projections to map high-dimensional data into low-dimensional hash buckets for quick comparison.\")),/*#__PURE__*/React.createElement(\"h2\",null,\"Similarity Measurements\"),/*#__PURE__*/React.createElement(\"h3\",null,\"1. Euclidean Distance\"),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"code\",null,\"d(A, B) = \\u221A(\\u03A3(A_i - B_i)^2)\")),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Measures the straight-line distance between two points in Euclidean space.\")),/*#__PURE__*/React.createElement(\"h3\",null,\"2. Cosine Similarity\"),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"code\",null,\"cos(\\u03B8) = (A \\xB7 B) / (||A|| ||B||)\")),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Measures the cosine of the angle between two vectors, focusing on direction rather than magnitude.\")),/*#__PURE__*/React.createElement(\"h3\",null,\"3. Dot Product Similarity\"),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"code\",null,\"A \\xB7 B = \\u03A3(A_i * B_i)\")),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Simple and efficient, combines magnitude and direction of vectors.\")),/*#__PURE__*/React.createElement(\"h2\",null,\"Filtering\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Combines vector and metadata indexing to refine search results.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Can be pre-filtering (before similarity search) or post-filtering (after similarity search).\")),/*#__PURE__*/React.createElement(\"h2\",null,\"Selection of Vector Databases\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Factors include distributed architecture, high availability, fault tolerance, access control, and integration with existing APIs and SDKs.\"),/*#__PURE__*/React.createElement(\"li\",null,\"Examples of vector databases: Chroma, Milvus, Pinecone, Qdrant, Typesense, Weaviate.\")),/*#__PURE__*/React.createElement(\"h2\",null,\"Conclusion\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Vector databases are pivotal in AI and machine learning applications, offering efficient similarity search in high-dimensional spaces.\"),/*#__PURE__*/React.createElement(\"li\",null,\"They require careful selection and implementation based on the specific needs of the application and the characteristics of the data.\")));}export default Vector_Database;","map":{"version":3,"names":["React","Layout","InlineMath","BlockMath","SyntaxHighlighter","Vector_Database","createElement"],"sources":["/Users/wongdowling/Documents/my_notes/src/subsections/MachineLearning/VectorDatabase.js"],"sourcesContent":["import React from \"react\";\nimport Layout, { InlineMath, BlockMath, SyntaxHighlighter } from \"../../Layout\";\n\nfunction Vector_Database() {\n  return (\n    <main>\n      <h2>Key Concepts</h2>\n    <h3>1. Vector Databases</h3>\n    <ul>\n        <li>Emerged due to limitations in traditional databases and the rise of AI applications.</li>\n        <li>Store and manage vector embeddings which represent data in high-dimensional spaces.</li>\n    </ul>\n    <h3>2. Vector Embeddings</h3>\n    <ul>\n        <li>Process of converting data (text, images, audio) into high-dimensional vectors.</li>\n        <li>Examples include OpenAI's text-embedding-ada-002 for text and clip-vit-base-patch32 for images.</li>\n    </ul>\n    <h3>3. Similarity Search</h3>\n    <ul>\n        <li>Core function of vector databases, finding similar vectors in high-dimensional space.</li>\n        <li>Algorithms include K-Means, Product Quantization (PQ), Hierarchical Navigable Small Worlds (HNSW), and Locality Sensitive Hashing (LSH).</li>\n    </ul>\n    <h3>4. Feature Engineering</h3>\n    <ul>\n        <li>Process of extracting features from raw data to better represent its underlying patterns.</li>\n        <li>Essential for creating effective vector embeddings.</li>\n    </ul>\n\n    <h2>Important Algorithms and Methods</h2>\n    <h3>1. K-Means Clustering</h3>\n    <ul>\n        <li>Divides data into k clusters by minimizing within-cluster variance.</li>\n        <li>Steps: initialize centroids, assign points to nearest centroid, update centroids, repeat until convergence.</li>\n    </ul>\n    <h3>2. Product Quantization (PQ)</h3>\n    <ul>\n        <li>Reduces memory usage by splitting vectors into sub-vectors and quantizing each sub-vector independently.</li>\n        <li>Maintains search efficiency by encoding vectors into compact representations.</li>\n    </ul>\n    <h3>3. Hierarchical Navigable Small Worlds (HNSW)</h3>\n    <ul>\n        <li>Constructs a multi-layer graph where each layer is a small-world network.</li>\n        <li>Provides efficient search by navigating through higher layers (coarse search) down to lower layers (fine search).</li>\n    </ul>\n    <h3>4. Locality Sensitive Hashing (LSH)</h3>\n    <ul>\n        <li>Hashes similar vectors into the same bucket with high probability.</li>\n        <li>Uses random projections to map high-dimensional data into low-dimensional hash buckets for quick comparison.</li>\n    </ul>\n\n    <h2>Similarity Measurements</h2>\n    <h3>1. Euclidean Distance</h3>\n    <p>\n        <code>d(A, B) = √(Σ(A_i - B_i)^2)</code>\n    </p>\n    <ul>\n        <li>Measures the straight-line distance between two points in Euclidean space.</li>\n    </ul>\n    <h3>2. Cosine Similarity</h3>\n    <p>\n        <code>cos(θ) = (A · B) / (||A|| ||B||)</code>\n    </p>\n    <ul>\n        <li>Measures the cosine of the angle between two vectors, focusing on direction rather than magnitude.</li>\n    </ul>\n    <h3>3. Dot Product Similarity</h3>\n    <p>\n        <code>A · B = Σ(A_i * B_i)</code>\n    </p>\n    <ul>\n        <li>Simple and efficient, combines magnitude and direction of vectors.</li>\n    </ul>\n\n    <h2>Filtering</h2>\n    <ul>\n        <li>Combines vector and metadata indexing to refine search results.</li>\n        <li>Can be pre-filtering (before similarity search) or post-filtering (after similarity search).</li>\n    </ul>\n\n    <h2>Selection of Vector Databases</h2>\n    <ul>\n        <li>Factors include distributed architecture, high availability, fault tolerance, access control, and integration with existing APIs and SDKs.</li>\n        <li>Examples of vector databases: Chroma, Milvus, Pinecone, Qdrant, Typesense, Weaviate.</li>\n    </ul>\n\n    <h2>Conclusion</h2>\n    <ul>\n        <li>Vector databases are pivotal in AI and machine learning applications, offering efficient similarity search in high-dimensional spaces.</li>\n        <li>They require careful selection and implementation based on the specific needs of the application and the characteristics of the data.</li>\n    </ul>\n    </main>\n  );\n}\n\nexport default Vector_Database;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,EAAIC,UAAU,CAAEC,SAAS,CAAEC,iBAAiB,KAAQ,cAAc,CAE/E,QAAS,CAAAC,eAAeA,CAAA,CAAG,CACzB,mBACEL,KAAA,CAAAM,aAAA,0BACEN,KAAA,CAAAM,aAAA,WAAI,cAAgB,CAAC,cACvBN,KAAA,CAAAM,aAAA,WAAI,qBAAuB,CAAC,cAC5BN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,sFAAwF,CAAC,cAC7FN,KAAA,CAAAM,aAAA,WAAI,qFAAuF,CAC3F,CAAC,cACLN,KAAA,CAAAM,aAAA,WAAI,sBAAwB,CAAC,cAC7BN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,iFAAmF,CAAC,cACxFN,KAAA,CAAAM,aAAA,WAAI,iGAAmG,CACvG,CAAC,cACLN,KAAA,CAAAM,aAAA,WAAI,sBAAwB,CAAC,cAC7BN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,uFAAyF,CAAC,cAC9FN,KAAA,CAAAM,aAAA,WAAI,0IAA4I,CAChJ,CAAC,cACLN,KAAA,CAAAM,aAAA,WAAI,wBAA0B,CAAC,cAC/BN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,2FAA6F,CAAC,cAClGN,KAAA,CAAAM,aAAA,WAAI,qDAAuD,CAC3D,CAAC,cAELN,KAAA,CAAAM,aAAA,WAAI,kCAAoC,CAAC,cACzCN,KAAA,CAAAM,aAAA,WAAI,uBAAyB,CAAC,cAC9BN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,qEAAuE,CAAC,cAC5EN,KAAA,CAAAM,aAAA,WAAI,6GAA+G,CACnH,CAAC,cACLN,KAAA,CAAAM,aAAA,WAAI,8BAAgC,CAAC,cACrCN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,0GAA4G,CAAC,cACjHN,KAAA,CAAAM,aAAA,WAAI,+EAAiF,CACrF,CAAC,cACLN,KAAA,CAAAM,aAAA,WAAI,+CAAiD,CAAC,cACtDN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,2EAA6E,CAAC,cAClFN,KAAA,CAAAM,aAAA,WAAI,mHAAqH,CACzH,CAAC,cACLN,KAAA,CAAAM,aAAA,WAAI,qCAAuC,CAAC,cAC5CN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,oEAAsE,CAAC,cAC3EN,KAAA,CAAAM,aAAA,WAAI,8GAAgH,CACpH,CAAC,cAELN,KAAA,CAAAM,aAAA,WAAI,yBAA2B,CAAC,cAChCN,KAAA,CAAAM,aAAA,WAAI,uBAAyB,CAAC,cAC9BN,KAAA,CAAAM,aAAA,uBACIN,KAAA,CAAAM,aAAA,aAAM,uCAAiC,CACxC,CAAC,cACJN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,4EAA8E,CAClF,CAAC,cACLN,KAAA,CAAAM,aAAA,WAAI,sBAAwB,CAAC,cAC7BN,KAAA,CAAAM,aAAA,uBACIN,KAAA,CAAAM,aAAA,aAAM,0CAAsC,CAC7C,CAAC,cACJN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,oGAAsG,CAC1G,CAAC,cACLN,KAAA,CAAAM,aAAA,WAAI,2BAA6B,CAAC,cAClCN,KAAA,CAAAM,aAAA,uBACIN,KAAA,CAAAM,aAAA,aAAM,8BAA0B,CACjC,CAAC,cACJN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,oEAAsE,CAC1E,CAAC,cAELN,KAAA,CAAAM,aAAA,WAAI,WAAa,CAAC,cAClBN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,iEAAmE,CAAC,cACxEN,KAAA,CAAAM,aAAA,WAAI,8FAAgG,CACpG,CAAC,cAELN,KAAA,CAAAM,aAAA,WAAI,+BAAiC,CAAC,cACtCN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,4IAA8I,CAAC,cACnJN,KAAA,CAAAM,aAAA,WAAI,sFAAwF,CAC5F,CAAC,cAELN,KAAA,CAAAM,aAAA,WAAI,YAAc,CAAC,cACnBN,KAAA,CAAAM,aAAA,wBACIN,KAAA,CAAAM,aAAA,WAAI,wIAA0I,CAAC,cAC/IN,KAAA,CAAAM,aAAA,WAAI,uIAAyI,CAC7I,CACE,CAAC,CAEX,CAEA,cAAe,CAAAD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}