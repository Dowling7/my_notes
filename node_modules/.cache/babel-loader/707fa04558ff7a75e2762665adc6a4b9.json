{"ast":null,"code":"var _jsxFileName = \"/Users/wongdowling/Documents/my_notes/src/subsections/Algorithm/PID.js\";\nimport React from \"react\";\nimport Layout, { InlineMath, BlockMath, SyntaxHighlighter } from \"../../Layout\";\nconst codeString = `\nclass PID:\n    def __init__(self, Kp, Ki, Kd, setpoint):\n        self.Kp = Kp\n        self.Ki = Ki\n        self.Kd = Kd\n        self.setpoint = setpoint\n        self.integral = 0\n        self.previous_error = 0\n\n    def update(self, measured_value, dt):\n        # Calculate error\n        error = self.setpoint - measured_value\n        \n        # Proportional term\n        P_out = self.Kp * error\n        \n        # Integral term\n        self.integral += error * dt\n        I_out = self.Ki * self.integral\n        \n        # Derivative term\n        derivative = (error - self.previous_error) / dt\n        D_out = self.Kd * derivative\n        \n        # Total output\n        output = P_out + I_out + D_out\n        \n        # Save error for next iteration\n        self.previous_error = error\n        \n        return output\n\n# Example usage\nimport time\n\n# PID controller with Kp=1.0, Ki=0.1, Kd=0.05, and setpoint=10\npid = PID(Kp=1.0, Ki=0.1, Kd=0.05, setpoint=10)\n\n# Simulate a process variable (e.g., temperature)\nmeasured_value = 0\ndt = 0.1  # time step in seconds\n\nfor i in range(100):\n    control_output = pid.update(measured_value, dt)\n    # Simulate process reaction to control output (for example purposes only)\n    measured_value += control_output * dt\n    print(f\"Time: {i*dt:.1f}s, Measured Value: {measured_value:.2f}, Control Output: {control_output:.2f}\")\n    time.sleep(dt)\n  `;\nfunction PID() {\n  return /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"PID Control Explanation\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Proportional-Integral-Derivative Control\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Proportional Term (P):\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"The proportional term produces an output value that is proportional to the current error value.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"The proportional response can be adjusted by multiplying the error by a constant \", /*#__PURE__*/React.createElement(InlineMath, {\n    math: \"K_p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 94\n    }\n  }), \", known as the proportional gain.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"If the error is large, the control output is large, and vice versa.\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Integral Term (I):\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"The integral term is concerned with the accumulation of past errors.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"If the error has been present for some time, the integral term will accumulate and attempt to correct the error.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"This term is multiplied by a constant \", /*#__PURE__*/React.createElement(InlineMath, {\n    math: \"K_i\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 51\n    }\n  }), \", the integral gain.\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Derivative Term (D):\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"The derivative term predicts future error based on its rate of change.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"By looking at the rate of change of the error, it applies a damping effect, which reduces the overshoot.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"This term is multiplied by a constant \", /*#__PURE__*/React.createElement(InlineMath, {\n    math: \"K_d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 51\n    }\n  }), \", the derivative gain.\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"PID Control Algorithm\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"The PID control algorithm can be represented as:\"), /*#__PURE__*/React.createElement(BlockMath, {\n    math: \"output(t) = K_p \\\\cdot e(t) + K_i \\\\cdot \\\\int_0^t e(\\\\tau) \\\\, d\\\\tau + K_d \\\\cdot \\\\frac{d e(t)}{d t}\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"where:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InlineMath, {\n    math: \"e(t)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), \" is the error at time \", /*#__PURE__*/React.createElement(InlineMath, {\n    math: \"t\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 61\n    }\n  }), \".\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InlineMath, {\n    math: \"K_p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), \" is the proportional gain.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InlineMath, {\n    math: \"K_i\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), \" is the integral gain.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InlineMath, {\n    math: \"K_d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), \" is the derivative gain.\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Python Implementation\"), /*#__PURE__*/React.createElement(SyntaxHighlighter, {\n    language: \"python\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, codeString));\n  ;\n}\nexport default PID;","map":{"version":3,"names":["React","Layout","InlineMath","BlockMath","SyntaxHighlighter","codeString","PID","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","math","language"],"sources":["/Users/wongdowling/Documents/my_notes/src/subsections/Algorithm/PID.js"],"sourcesContent":["import React from \"react\";\nimport Layout, { InlineMath, BlockMath, SyntaxHighlighter } from \"../../Layout\";\n\nconst codeString = `\nclass PID:\n    def __init__(self, Kp, Ki, Kd, setpoint):\n        self.Kp = Kp\n        self.Ki = Ki\n        self.Kd = Kd\n        self.setpoint = setpoint\n        self.integral = 0\n        self.previous_error = 0\n\n    def update(self, measured_value, dt):\n        # Calculate error\n        error = self.setpoint - measured_value\n        \n        # Proportional term\n        P_out = self.Kp * error\n        \n        # Integral term\n        self.integral += error * dt\n        I_out = self.Ki * self.integral\n        \n        # Derivative term\n        derivative = (error - self.previous_error) / dt\n        D_out = self.Kd * derivative\n        \n        # Total output\n        output = P_out + I_out + D_out\n        \n        # Save error for next iteration\n        self.previous_error = error\n        \n        return output\n\n# Example usage\nimport time\n\n# PID controller with Kp=1.0, Ki=0.1, Kd=0.05, and setpoint=10\npid = PID(Kp=1.0, Ki=0.1, Kd=0.05, setpoint=10)\n\n# Simulate a process variable (e.g., temperature)\nmeasured_value = 0\ndt = 0.1  # time step in seconds\n\nfor i in range(100):\n    control_output = pid.update(measured_value, dt)\n    # Simulate process reaction to control output (for example purposes only)\n    measured_value += control_output * dt\n    print(f\"Time: {i*dt:.1f}s, Measured Value: {measured_value:.2f}, Control Output: {control_output:.2f}\")\n    time.sleep(dt)\n  `;\n\n  \n\n\nfunction PID() {\n  return (\n    <main>\n      <h2>PID Control Explanation</h2>\n      <h3>Proportional-Integral-Derivative Control</h3>\n      <p>\n        <strong>Proportional Term (P):</strong>\n      </p>\n      <ul>\n        <li>The proportional term produces an output value that is proportional to the current error value.</li>\n        <li>The proportional response can be adjusted by multiplying the error by a constant <InlineMath math=\"K_p\" />, known as the proportional gain.</li>\n        <li>If the error is large, the control output is large, and vice versa.</li>\n      </ul>\n      <p>\n        <strong>Integral Term (I):</strong>\n      </p>\n      <ul>\n        <li>The integral term is concerned with the accumulation of past errors.</li>\n        <li>If the error has been present for some time, the integral term will accumulate and attempt to correct the error.</li>\n        <li>This term is multiplied by a constant <InlineMath math=\"K_i\" />, the integral gain.</li>\n      </ul>\n      <p>\n        <strong>Derivative Term (D):</strong>\n      </p>\n      <ul>\n        <li>The derivative term predicts future error based on its rate of change.</li>\n        <li>By looking at the rate of change of the error, it applies a damping effect, which reduces the overshoot.</li>\n        <li>This term is multiplied by a constant <InlineMath math=\"K_d\" />, the derivative gain.</li>\n      </ul>\n      <h3>PID Control Algorithm</h3>\n      <p>\n        The PID control algorithm can be represented as:\n      </p>\n      <BlockMath math=\"output(t) = K_p \\cdot e(t) + K_i \\cdot \\int_0^t e(\\tau) \\, d\\tau + K_d \\cdot \\frac{d e(t)}{d t}\" />\n      <p>where:</p>\n      <ul>\n        <li><InlineMath math=\"e(t)\" /> is the error at time <InlineMath math=\"t\" />.</li>\n        <li><InlineMath math=\"K_p\" /> is the proportional gain.</li>\n        <li><InlineMath math=\"K_i\" /> is the integral gain.</li>\n        <li><InlineMath math=\"K_d\" /> is the derivative gain.</li>\n      </ul>\n      <h3>Python Implementation</h3>\n      <SyntaxHighlighter language=\"python\" >\n        {codeString}\n      </SyntaxHighlighter>\n    </main>\n  );\n  ;\n}\n\nexport default PID;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}