{"ast":null,"code":"'use strict';\n\nvar core = require('@react-pdf-viewer/core');\nvar React = require('react');\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);\nvar DualPageCoverViewModeIcon = function () {\n  return React__namespace.createElement(core.Icon, {\n    size: 16\n  }, React__namespace.createElement(\"rect\", {\n    x: \"0.5\",\n    y: \"0.497\",\n    width: \"22\",\n    height: \"22\",\n    rx: \"1\",\n    ry: \"1\"\n  }), React__namespace.createElement(\"line\", {\n    x1: \"0.5\",\n    y1: \"6.497\",\n    x2: \"22.5\",\n    y2: \"6.497\"\n  }), React__namespace.createElement(\"line\", {\n    x1: \"11.5\",\n    y1: \"6.497\",\n    x2: \"11.5\",\n    y2: \"22.497\"\n  }));\n};\nvar DualPageViewModeIcon = function () {\n  return React__namespace.createElement(core.Icon, {\n    size: 16\n  }, React__namespace.createElement(\"rect\", {\n    x: \"0.5\",\n    y: \"0.497\",\n    width: \"22\",\n    height: \"22\",\n    rx: \"1\",\n    ry: \"1\"\n  }), React__namespace.createElement(\"line\", {\n    x1: \"11.5\",\n    y1: \"0.497\",\n    x2: \"11.5\",\n    y2: \"22.497\"\n  }));\n};\nvar HorizontalScrollingIcon = function () {\n  return React__namespace.createElement(core.Icon, {\n    size: 16\n  }, React__namespace.createElement(\"path\", {\n    d: \"M6.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\\n            M14.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\\n            M22.5,21.5 c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\"\n  }));\n};\nvar PageScrollingIcon = function () {\n  return React__namespace.createElement(core.Icon, {\n    size: 16\n  }, React__namespace.createElement(\"rect\", {\n    x: \"0.5\",\n    y: \"0.497\",\n    width: \"22\",\n    height: \"22\",\n    rx: \"1\",\n    ry: \"1\"\n  }));\n};\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar switchScrollMode = function (store, scrollMode) {\n  store.get('switchScrollMode')(scrollMode);\n  var currentViewMode = store.get('viewMode');\n  if ((scrollMode === core.ScrollMode.Horizontal || scrollMode === core.ScrollMode.Wrapped) && currentViewMode !== core.ViewMode.SinglePage) {\n    store.get('switchViewMode')(core.ViewMode.SinglePage);\n  }\n};\nvar VerticalScrollingIcon = function () {\n  return React__namespace.createElement(core.Icon, {\n    size: 16\n  }, React__namespace.createElement(\"path\", {\n    d: \"M23.5,5.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V5.5z\\n            M23.5,13.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V13.5z\\n            M23.5,21.5 c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V21.5z\"\n  }));\n};\nvar WrappedScrollingIcon = function () {\n  return React__namespace.createElement(core.Icon, {\n    size: 16\n  }, React__namespace.createElement(\"path\", {\n    d: \"M10.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\\n            M23.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\\n            M10.5,22.5 c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z\\n            M23.5,22.5c0,0.552-0.448,1-1,1 h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z\"\n  }));\n};\nvar SwitchScrollModeDecorator = function (_a) {\n  var children = _a.children,\n    mode = _a.mode,\n    onClick = _a.onClick;\n  var l10n = React__namespace.useContext(core.LocalizationContext).l10n;\n  var label = '';\n  var icon = React__namespace.createElement(VerticalScrollingIcon, null);\n  switch (mode) {\n    case core.ScrollMode.Horizontal:\n      label = l10n && l10n.scrollMode ? l10n.scrollMode.horizontalScrolling : 'Horizontal scrolling';\n      icon = React__namespace.createElement(HorizontalScrollingIcon, null);\n      break;\n    case core.ScrollMode.Page:\n      label = l10n && l10n.scrollMode ? l10n.scrollMode.pageScrolling : 'Page scrolling';\n      icon = React__namespace.createElement(PageScrollingIcon, null);\n      break;\n    case core.ScrollMode.Wrapped:\n      label = l10n && l10n.scrollMode ? l10n.scrollMode.wrappedScrolling : 'Wrapped scrolling';\n      icon = React__namespace.createElement(WrappedScrollingIcon, null);\n      break;\n    case core.ScrollMode.Vertical:\n    default:\n      label = l10n && l10n.scrollMode ? l10n.scrollMode.verticalScrolling : 'Vertical scrolling';\n      icon = React__namespace.createElement(VerticalScrollingIcon, null);\n      break;\n  }\n  return children({\n    icon: icon,\n    label: label,\n    onClick: onClick\n  });\n};\nvar TOOLTIP_OFFSET$1 = {\n  left: 0,\n  top: 8\n};\nvar SwitchScrollModeButton = function (_a) {\n  var isDisabled = _a.isDisabled,\n    isSelected = _a.isSelected,\n    mode = _a.mode,\n    onClick = _a.onClick;\n  var testId = '';\n  switch (mode) {\n    case core.ScrollMode.Horizontal:\n      testId = 'scroll-mode__horizontal-button';\n      break;\n    case core.ScrollMode.Page:\n      testId = 'scroll-mode__page-button';\n      break;\n    case core.ScrollMode.Wrapped:\n      testId = 'scroll-mode__wrapped-button';\n      break;\n    case core.ScrollMode.Vertical:\n    default:\n      testId = 'scroll-mode__vertical-button';\n      break;\n  }\n  return React__namespace.createElement(SwitchScrollModeDecorator, {\n    mode: mode,\n    onClick: onClick\n  }, function (props) {\n    return React__namespace.createElement(core.Tooltip, {\n      ariaControlsSuffix: \"scroll-mode-switch\",\n      position: core.Position.BottomCenter,\n      target: React__namespace.createElement(core.MinimalButton, {\n        ariaLabel: props.label,\n        isDisabled: isDisabled,\n        isSelected: isSelected,\n        testId: testId,\n        onClick: props.onClick\n      }, props.icon),\n      content: function () {\n        return props.label;\n      },\n      offset: TOOLTIP_OFFSET$1\n    });\n  });\n};\nvar useScrollMode = function (store) {\n  var _a = React__namespace.useState(store.get('scrollMode') || core.ScrollMode.Vertical),\n    scrollMode = _a[0],\n    setScrollMode = _a[1];\n  var handleScrollModeChanged = function (currentScrollMode) {\n    setScrollMode(currentScrollMode);\n  };\n  React__namespace.useEffect(function () {\n    store.subscribe('scrollMode', handleScrollModeChanged);\n    return function () {\n      store.unsubscribe('scrollMode', handleScrollModeChanged);\n    };\n  }, []);\n  return {\n    scrollMode: scrollMode\n  };\n};\nvar useViewMode = function (store) {\n  var _a = React__namespace.useState(store.get('viewMode') || core.ViewMode.SinglePage),\n    viewMode = _a[0],\n    setViewMode = _a[1];\n  var handleViewModeChanged = function (currentViewMode) {\n    setViewMode(currentViewMode);\n  };\n  React__namespace.useEffect(function () {\n    store.subscribe('viewMode', handleViewModeChanged);\n    return function () {\n      store.unsubscribe('viewMode', handleViewModeChanged);\n    };\n  }, []);\n  return {\n    viewMode: viewMode\n  };\n};\nvar SwitchScrollMode = function (_a) {\n  var children = _a.children,\n    mode = _a.mode,\n    store = _a.store;\n  var viewMode = useViewMode(store).viewMode;\n  var scrollMode = useScrollMode(store).scrollMode;\n  var onClick = function () {\n    switchScrollMode(store, mode);\n  };\n  var isSelected = scrollMode === mode;\n  var isDisabled = (mode === core.ScrollMode.Horizontal || mode === core.ScrollMode.Wrapped) && viewMode !== core.ViewMode.SinglePage;\n  var defaultChildren = function (props) {\n    return React__namespace.createElement(SwitchScrollModeButton, {\n      isDisabled: isDisabled,\n      isSelected: isSelected,\n      mode: props.mode,\n      onClick: props.onClick\n    });\n  };\n  var render = children || defaultChildren;\n  return render({\n    isDisabled: isDisabled,\n    isSelected: isSelected,\n    mode: mode,\n    onClick: onClick\n  });\n};\nvar SwitchScrollModeMenuItem = function (_a) {\n  var isDisabled = _a.isDisabled,\n    isSelected = _a.isSelected,\n    mode = _a.mode,\n    onClick = _a.onClick;\n  var testId = '';\n  switch (mode) {\n    case core.ScrollMode.Horizontal:\n      testId = 'scroll-mode__horizontal-menu';\n      break;\n    case core.ScrollMode.Page:\n      testId = 'scroll-mode__page-menu';\n      break;\n    case core.ScrollMode.Wrapped:\n      testId = 'scroll-mode__wrapped-menu';\n      break;\n    case core.ScrollMode.Vertical:\n    default:\n      testId = 'scroll-mode__vertical-menu';\n      break;\n  }\n  return React__namespace.createElement(SwitchScrollModeDecorator, {\n    mode: mode,\n    onClick: onClick\n  }, function (props) {\n    return React__namespace.createElement(core.MenuItem, {\n      checked: isSelected,\n      icon: props.icon,\n      isDisabled: isDisabled,\n      testId: testId,\n      onClick: props.onClick\n    }, props.label);\n  });\n};\nvar switchViewMode = function (store, viewMode) {\n  store.get('switchViewMode')(viewMode);\n  var currentScrollMode = store.get('scrollMode');\n  if ((currentScrollMode === core.ScrollMode.Horizontal || currentScrollMode === core.ScrollMode.Wrapped) && viewMode !== core.ViewMode.SinglePage) {\n    store.get('switchScrollMode')(core.ScrollMode.Vertical);\n  }\n};\nvar SwitchViewModeDecorator = function (_a) {\n  var children = _a.children,\n    mode = _a.mode,\n    onClick = _a.onClick;\n  var l10n = React__namespace.useContext(core.LocalizationContext).l10n;\n  var label = '';\n  var icon = React__namespace.createElement(PageScrollingIcon, null);\n  switch (mode) {\n    case core.ViewMode.DualPage:\n      label = l10n && l10n.scrollMode ? l10n.scrollMode.dualPage : 'Dual page';\n      icon = React__namespace.createElement(DualPageViewModeIcon, null);\n      break;\n    case core.ViewMode.DualPageWithCover:\n      label = l10n && l10n.scrollMode ? l10n.scrollMode.dualPageCover : 'Dual page with cover';\n      icon = React__namespace.createElement(DualPageCoverViewModeIcon, null);\n      break;\n    case core.ViewMode.SinglePage:\n    default:\n      label = l10n && l10n.scrollMode ? l10n.scrollMode.singlePage : 'Single page';\n      icon = React__namespace.createElement(PageScrollingIcon, null);\n      break;\n  }\n  return children({\n    icon: icon,\n    label: label,\n    onClick: onClick\n  });\n};\nvar TOOLTIP_OFFSET = {\n  left: 0,\n  top: 8\n};\nvar SwitchViewModeButton = function (_a) {\n  var isDisabled = _a.isDisabled,\n    isSelected = _a.isSelected,\n    mode = _a.mode,\n    onClick = _a.onClick;\n  var testId = '';\n  switch (mode) {\n    case core.ViewMode.DualPage:\n      testId = 'view-mode__dual-button';\n      break;\n    case core.ViewMode.DualPageWithCover:\n      testId = 'view-mode__dual-cover-button';\n      break;\n    case core.ViewMode.SinglePage:\n    default:\n      testId = 'view-mode__single-button';\n      break;\n  }\n  return React__namespace.createElement(SwitchViewModeDecorator, {\n    mode: mode,\n    onClick: onClick\n  }, function (props) {\n    return React__namespace.createElement(core.Tooltip, {\n      ariaControlsSuffix: \"view-mode-switch\",\n      position: core.Position.BottomCenter,\n      target: React__namespace.createElement(core.MinimalButton, {\n        ariaLabel: props.label,\n        isDisabled: isDisabled,\n        isSelected: isSelected,\n        testId: testId,\n        onClick: props.onClick\n      }, props.icon),\n      content: function () {\n        return props.label;\n      },\n      offset: TOOLTIP_OFFSET\n    });\n  });\n};\nvar SwitchViewMode = function (_a) {\n  var children = _a.children,\n    mode = _a.mode,\n    store = _a.store;\n  var viewMode = useViewMode(store).viewMode;\n  var scrollMode = useScrollMode(store).scrollMode;\n  var onClick = function () {\n    switchViewMode(store, mode);\n  };\n  var isSelected = viewMode === mode;\n  var isDisabled = (scrollMode === core.ScrollMode.Horizontal || scrollMode === core.ScrollMode.Wrapped) && mode !== core.ViewMode.SinglePage;\n  var defaultChildren = function (props) {\n    return React__namespace.createElement(SwitchViewModeButton, {\n      isDisabled: isDisabled,\n      isSelected: isSelected,\n      mode: props.mode,\n      onClick: props.onClick\n    });\n  };\n  var render = children || defaultChildren;\n  return render({\n    isDisabled: isDisabled,\n    isSelected: isSelected,\n    mode: mode,\n    onClick: onClick\n  });\n};\nvar SwitchViewModeMenuItem = function (_a) {\n  var isDisabled = _a.isDisabled,\n    isSelected = _a.isSelected,\n    mode = _a.mode,\n    onClick = _a.onClick;\n  var testId = '';\n  switch (mode) {\n    case core.ViewMode.DualPage:\n      testId = 'view-mode__dual-menu';\n      break;\n    case core.ViewMode.DualPageWithCover:\n      testId = 'view-mode__dual-cover-menu';\n      break;\n    case core.ViewMode.SinglePage:\n    default:\n      testId = 'view-mode__single-menu';\n      break;\n  }\n  return React__namespace.createElement(SwitchViewModeDecorator, {\n    mode: mode,\n    onClick: onClick\n  }, function (props) {\n    return React__namespace.createElement(core.MenuItem, {\n      checked: isSelected,\n      icon: props.icon,\n      isDisabled: isDisabled,\n      testId: testId,\n      onClick: props.onClick\n    }, props.label);\n  });\n};\nvar scrollModePlugin = function () {\n  var store = React__namespace.useMemo(function () {\n    return core.createStore({\n      scrollMode: core.ScrollMode.Vertical,\n      viewMode: core.ViewMode.SinglePage,\n      switchScrollMode: function () {},\n      switchViewMode: function () {}\n    });\n  }, []);\n  var SwitchScrollModeDecorator = function (props) {\n    return React__namespace.createElement(SwitchScrollMode, __assign({}, props, {\n      store: store\n    }));\n  };\n  var SwitchScrollModeButtonDecorator = function (props) {\n    return React__namespace.createElement(SwitchScrollModeDecorator, {\n      mode: props.mode\n    }, function (p) {\n      return React__namespace.createElement(SwitchScrollModeButton, {\n        isDisabled: p.isDisabled,\n        isSelected: p.isSelected,\n        mode: p.mode,\n        onClick: function () {\n          p.onClick();\n        }\n      });\n    });\n  };\n  var SwitchScrollModeMenuItemDecorator = function (props) {\n    return React__namespace.createElement(SwitchScrollModeDecorator, {\n      mode: props.mode\n    }, function (p) {\n      return React__namespace.createElement(SwitchScrollModeMenuItem, {\n        isDisabled: p.isDisabled,\n        isSelected: p.isSelected,\n        mode: p.mode,\n        onClick: function () {\n          p.onClick();\n          props.onClick();\n        }\n      });\n    });\n  };\n  var SwitchViewModeDecorator = function (props) {\n    return React__namespace.createElement(SwitchViewMode, __assign({}, props, {\n      store: store\n    }));\n  };\n  var SwitchViewModeButtonDecorator = function (props) {\n    return React__namespace.createElement(SwitchViewModeDecorator, {\n      mode: props.mode\n    }, function (p) {\n      return React__namespace.createElement(SwitchViewModeButton, {\n        isDisabled: p.isDisabled,\n        isSelected: p.isSelected,\n        mode: p.mode,\n        onClick: function () {\n          p.onClick();\n        }\n      });\n    });\n  };\n  var SwitchViewModeMenuItemDecorator = function (props) {\n    return React__namespace.createElement(SwitchViewModeDecorator, {\n      mode: props.mode\n    }, function (p) {\n      return React__namespace.createElement(SwitchViewModeMenuItem, {\n        isDisabled: p.isDisabled,\n        isSelected: p.isSelected,\n        mode: p.mode,\n        onClick: function () {\n          p.onClick();\n          props.onClick();\n        }\n      });\n    });\n  };\n  return {\n    install: function (pluginFunctions) {\n      store.update('switchScrollMode', pluginFunctions.switchScrollMode);\n      store.update('switchViewMode', pluginFunctions.switchViewMode);\n    },\n    onViewerStateChange: function (viewerState) {\n      store.update('scrollMode', viewerState.scrollMode);\n      store.update('viewMode', viewerState.viewMode);\n      return viewerState;\n    },\n    switchScrollMode: function (scrollMode) {\n      switchScrollMode(store, scrollMode);\n    },\n    switchViewMode: function (viewMode) {\n      switchViewMode(store, viewMode);\n    },\n    SwitchScrollMode: SwitchScrollModeDecorator,\n    SwitchScrollModeButton: SwitchScrollModeButtonDecorator,\n    SwitchScrollModeMenuItem: SwitchScrollModeMenuItemDecorator,\n    SwitchViewMode: SwitchViewModeDecorator,\n    SwitchViewModeButton: SwitchViewModeButtonDecorator,\n    SwitchViewModeMenuItem: SwitchViewModeMenuItemDecorator\n  };\n};\nexports.DualPageCoverViewModeIcon = DualPageCoverViewModeIcon;\nexports.DualPageViewModeIcon = DualPageViewModeIcon;\nexports.HorizontalScrollingIcon = HorizontalScrollingIcon;\nexports.PageScrollingIcon = PageScrollingIcon;\nexports.VerticalScrollingIcon = VerticalScrollingIcon;\nexports.WrappedScrollingIcon = WrappedScrollingIcon;\nexports.scrollModePlugin = scrollModePlugin;","map":null,"metadata":{},"sourceType":"script"}