{"ast":null,"code":"import React from\"react\";import Layout,{InlineMath,BlockMath,SyntaxHighlighter}from\"../../Layout\";function DAQ(){return/*#__PURE__*/React.createElement(\"main\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Generative Adversarial Network (GAN) Example\"),/*#__PURE__*/React.createElement(\"p\",null,\"Generative Adversarial Networks (GANs) consist of two models, a generator and a discriminator, which are trained simultaneously in a zero-sum game framework. The generator's role is to create data that looks as close as possible to real data, while the discriminator tries to distinguish between real and generated data. Here are the key steps involved:\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"Select Data:\"),\" Choose the type of data you want the GAN to generate. This could be images, text, music, etc.\"),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"Prepare Models:\"),\" Design and initialize the generator and discriminator models with appropriate architectures.\"),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"Train Models:\"),\" Alternately train the discriminator and generator. The discriminator learns to differentiate real data from fake, and the generator learns to fool the discriminator.\"),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"Evaluate:\"),\" Regularly evaluate the generator's output and adjust parameters or model architecture as needed.\"),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"Generate Data:\"),\" Once trained, use the generator to create data. This data can be used for various applications such as art, music, or as training data for other models.\")),/*#__PURE__*/React.createElement(SyntaxHighlighter,{language:\"python\"},\"import tensorflow as tf\\n      from tensorflow.keras import layers\\n\\n      # Generator Model\\n      def create_generator():\\n          model = tf.keras.Sequential([\\n              layers.Dense(256, use_bias=False, input_shape=(100,)),\\n              layers.BatchNormalization(),\\n              layers.LeakyReLU(),\\n              layers.Dense(512),\\n              layers.BatchNormalization(),\\n              layers.LeakyReLU(),\\n              layers.Dense(784, activation='tanh'),\\n              layers.Reshape((28, 28, 1))\\n          ])\\n          return model\\n\\n      # Discriminator Model\\n      def create_discriminator():\\n          model = tf.keras.Sequential([\\n              layers.Flatten(input_shape=(28, 28, 1)),\\n              layers.Dense(512),\\n              layers.LeakyReLU(),\\n              layers.Dropout(0.3),\\n              layers.Dense(1)\\n          ])\\n          return model\\n\\n      # Compile and set up the GAN\\n      generator = create_generator()\\n      discriminator = create_discriminator()\\n\\n      discriminator.compile(optimizer='adam', loss='binary_crossentropy')\\n      # The generator is trained through the combined model where it tries to deceive the discriminator\\n      combined = tf.keras.Sequential([generator, discriminator])\\n      combined.compile(optimizer='adam', loss='binary_crossentropy')\\n\\n      def train(generator, discriminator, combined, epochs, batch_size):\\n          for epoch in range(epochs):\\n              # Here, you would include the steps to train your models.\\n              # This typically involves generating noise, creating fake images from the noise using the generator,\\n              # passing real and fake images to the discriminator, and adjusting the weights based on their performance.\\n              pass\\n\\n      # Example of calling the train function\\n      # train(generator, discriminator, combined, epochs=50, batch_size=32)\"),/*#__PURE__*/React.createElement(SyntaxHighlighter,{language:\"python\"},\"import requests\\nfrom bs4 import BeautifulSoup\\n\\ndef scrape_website(url):\\n    # Send a HTTP request to the specified URL\\n    response = requests.get(url)\\n    # Check if the request was successful\\n    if response.status_code == 200:\\n        # Parse the content of the request with BeautifulSoup\\n        soup = BeautifulSoup(response.text, 'html.parser')\\n        # Extract elements as needed, here we take an example of extracting all paragraph tags\\n        paragraphs = soup.find_all('p')\\n        for p in paragraphs:\\n            print(p.text)\\n    else:\\n        print(\\\"Failed to retrieve the website\\\")\\n\\n# Example URL to scrape\\nscrape_website('http://example.com')\"),/*#__PURE__*/React.createElement(\"hr\",null));}export default DAQ;","map":{"version":3,"names":["React","Layout","InlineMath","BlockMath","SyntaxHighlighter","DAQ","createElement","language"],"sources":["/Users/wongdowling/Documents/my_notes/src/subsections/MachineLearning/DAQ.js"],"sourcesContent":["import React from \"react\";\nimport Layout, { InlineMath, BlockMath, SyntaxHighlighter } from \"../../Layout\";\n\nfunction DAQ() {\n  return (\n    <main>\n      <h2>Generative Adversarial Network (GAN) Example</h2>\n      <p>Generative Adversarial Networks (GANs) consist of two models, a generator and a discriminator, which are trained simultaneously in a zero-sum game framework. The generator's role is to create data that looks as close as possible to real data, while the discriminator tries to distinguish between real and generated data. Here are the key steps involved:</p>\n      <ul>\n        <li><strong>Select Data:</strong> Choose the type of data you want the GAN to generate. This could be images, text, music, etc.</li>\n        <li><strong>Prepare Models:</strong> Design and initialize the generator and discriminator models with appropriate architectures.</li>\n        <li><strong>Train Models:</strong> Alternately train the discriminator and generator. The discriminator learns to differentiate real data from fake, and the generator learns to fool the discriminator.</li>\n        <li><strong>Evaluate:</strong> Regularly evaluate the generator's output and adjust parameters or model architecture as needed.</li>\n        <li><strong>Generate Data:</strong> Once trained, use the generator to create data. This data can be used for various applications such as art, music, or as training data for other models.</li>\n      </ul>\n      <SyntaxHighlighter language=\"python\">\n      {`import tensorflow as tf\n      from tensorflow.keras import layers\n\n      # Generator Model\n      def create_generator():\n          model = tf.keras.Sequential([\n              layers.Dense(256, use_bias=False, input_shape=(100,)),\n              layers.BatchNormalization(),\n              layers.LeakyReLU(),\n              layers.Dense(512),\n              layers.BatchNormalization(),\n              layers.LeakyReLU(),\n              layers.Dense(784, activation='tanh'),\n              layers.Reshape((28, 28, 1))\n          ])\n          return model\n\n      # Discriminator Model\n      def create_discriminator():\n          model = tf.keras.Sequential([\n              layers.Flatten(input_shape=(28, 28, 1)),\n              layers.Dense(512),\n              layers.LeakyReLU(),\n              layers.Dropout(0.3),\n              layers.Dense(1)\n          ])\n          return model\n\n      # Compile and set up the GAN\n      generator = create_generator()\n      discriminator = create_discriminator()\n\n      discriminator.compile(optimizer='adam', loss='binary_crossentropy')\n      # The generator is trained through the combined model where it tries to deceive the discriminator\n      combined = tf.keras.Sequential([generator, discriminator])\n      combined.compile(optimizer='adam', loss='binary_crossentropy')\n\n      def train(generator, discriminator, combined, epochs, batch_size):\n          for epoch in range(epochs):\n              # Here, you would include the steps to train your models.\n              # This typically involves generating noise, creating fake images from the noise using the generator,\n              # passing real and fake images to the discriminator, and adjusting the weights based on their performance.\n              pass\n\n      # Example of calling the train function\n      # train(generator, discriminator, combined, epochs=50, batch_size=32)`}\n</SyntaxHighlighter>\n<SyntaxHighlighter language=\"python\">\n{`import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    # Send a HTTP request to the specified URL\n    response = requests.get(url)\n    # Check if the request was successful\n    if response.status_code == 200:\n        # Parse the content of the request with BeautifulSoup\n        soup = BeautifulSoup(response.text, 'html.parser')\n        # Extract elements as needed, here we take an example of extracting all paragraph tags\n        paragraphs = soup.find_all('p')\n        for p in paragraphs:\n            print(p.text)\n    else:\n        print(\"Failed to retrieve the website\")\n\n# Example URL to scrape\nscrape_website('http://example.com')`}\n</SyntaxHighlighter>\n\n\n      <hr />\n    </main>\n  );\n}\n\nexport default DAQ;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,EAAIC,UAAU,CAAEC,SAAS,CAAEC,iBAAiB,KAAQ,cAAc,CAE/E,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,mBACEL,KAAA,CAAAM,aAAA,0BACEN,KAAA,CAAAM,aAAA,WAAI,8CAAgD,CAAC,cACrDN,KAAA,CAAAM,aAAA,UAAG,mWAAoW,CAAC,cACxWN,KAAA,CAAAM,aAAA,wBACEN,KAAA,CAAAM,aAAA,wBAAIN,KAAA,CAAAM,aAAA,eAAQ,cAAoB,CAAC,iGAAkG,CAAC,cACpIN,KAAA,CAAAM,aAAA,wBAAIN,KAAA,CAAAM,aAAA,eAAQ,iBAAuB,CAAC,gGAAiG,CAAC,cACtIN,KAAA,CAAAM,aAAA,wBAAIN,KAAA,CAAAM,aAAA,eAAQ,eAAqB,CAAC,yKAA0K,CAAC,cAC7MN,KAAA,CAAAM,aAAA,wBAAIN,KAAA,CAAAM,aAAA,eAAQ,WAAiB,CAAC,oGAAqG,CAAC,cACpIN,KAAA,CAAAM,aAAA,wBAAIN,KAAA,CAAAM,aAAA,eAAQ,gBAAsB,CAAC,4JAA6J,CAC9L,CAAC,cACLN,KAAA,CAAAM,aAAA,CAACF,iBAAiB,EAACG,QAAQ,CAAC,QAAQ,03DA+CvB,CAAC,cACpBP,KAAA,CAAAM,aAAA,CAACF,iBAAiB,EAACG,QAAQ,CAAC,QAAQ,4qBAoBjB,CAAC,cAGdP,KAAA,CAAAM,aAAA,UAAK,CACD,CAAC,CAEX,CAEA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}